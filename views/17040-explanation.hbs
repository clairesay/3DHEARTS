<body class="common-structure">
    <header>
        <button id="returnToMenu" onclick="exitModule();"> <svg width="24" height="24"
                xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd">
                <path
                    d="M12 11.293l10.293-10.293.707.707-10.293 10.293 10.293 10.293-.707.707-10.293-10.293-10.293 10.293-.707-.707 10.293-10.293-10.293-10.293.707-.707 10.293 10.293z" />
            </svg> </button>
        <div id="module-name">
            <h1>Ben's Story</h1>
            <h3>Explanation</h3>
        </div>
    </header>
    <section class="content module-slide">
        <h1>How would you link the above cardiac defects to the clinical presentation? What is the diagnosis?</h1>
        <p>Think carefully about your answer before you proceed to the next page.</p>
    </section>
    {{!-- <section class="content module-slide">
        <h1>How would you link the above cardiac defects to the clinical presentation? What is the diagnosis?</h1>
        <h3>Explanation</h3>
        <p class="case-content">Ben has a VSD with left to right shunting (i.e., an acyanotic congenital cardiac
            condition).</p>
        <p class="case-content">Other left to right shunts include typical ASDs and PDAs.</p>
        <p class="case-content">These left to right shunt conditions cause increased pulmonary blood flow (tachypnoea on
            presentation and plethoric lung fields on the chest x-ray).</p>
    </section>
    <section class="content module-slide">
        <h1>How would you link the above cardiac defects to the clinical presentation? What is the diagnosis?</h1>
        <h3>Explanation</h3>
        <ul>The degree of left to right flow across a VSD is dependent on two variables: the size of the VSD and the
            pressure difference between the right and left ventricles.
            <li class="case-content">A small VSD is called 'restrictive' and will have a higher pressure difference
                between the ventricles, with high speed flow across a small area. In general, a louder murmur equates to
                a smaller VSD</li>
            <li class="case-content">If the VSD is of a size that is clinically significant, the degree of shunt between
                the ventricles will depend on the pressure difference between the left and right ventricles (i.e., from
                the high pressure side to the low pressure side)</li>
            <li class="case-content">At birth, high pulmonary vascular resistance means the RV has to pump against the
                higher resistance pulmonary vasculature and the RV pressure is high, meaning the pressure difference
                between the ventricles (and therefore the flow across a VSD) is minimal</li>
            <li class="case-content">Over the first 4-6 weeks, the pulmonary vascular resistance decreases, which
                results in lowered RV pressure. In the setting of a large VSD, this allows a significant pressure
                gradient to develop, which results in increased left to right flow across the VSD and eventually into
                the lungs.</li>
        </ul>
    </section> --}}
    <section class="content module-slide">
        <h1>How would you link the above cardiac defects to the clinical presentation? What is the diagnosis?</h1>
        <h3>Explanation</h3>
        {{#each explanation}}
        {{list this}}
        {{/each}}
    </section>

    {{!-- <section class="content module-slide">
        <h1>How would you link the above cardiac defects to the clinical presentation? What is the diagnosis?</h1>
        <h3>Explanation</h3>
        <p>This explains why newborn babies typically do not show symptoms even if they have a large VSD (and often they
            do not have a murmur!) Symptoms usually develop over approximately 4-6 weeks, once the pulmonary vascular
            resistance decreases. Similarly, neonates have a relative right axis deviation on the ECG, which slowly
            changes to a normal/left axis.</p>
    </section> --}}

    <section class="content module-slide">
        <p class="case-content">Well done on completing Ben's Story! Return to Modules Home to discover more stories.
        </p>
    </section>
    <button id="previous" class="nav-button" onclick="nextSlide(-1)"> <svg width="24" height="24"
            xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd">
            <path d="M2.117 12l7.527 6.235-.644.765-9-7.521 9-7.479.645.764-7.529 6.236h21.884v1h-21.883z" /></svg>
    </button>
    <button id="next-module" class="text-button" onclick="nextModule();">Modules Home</button>
    <button id="next" class="nav-button" onclick="nextSlide(1);"><svg width="24" height="24"
            xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd">
            <path d="M21.883 12l-7.527 6.235.644.765 9-7.521-9-7.479-.645.764 7.529 6.236h-21.884v1h21.883z" />
        </svg></button>
    <section id="navigation-tab">
        <a onclick="jumpSection('17040-oe.html', 'Case Examination');">Case Examination</a>
        <a onclick="jumpSection('17040-interaction.html', 'Interaction');">Interaction</a>
        <a onclick="jumpSection('17040-explanation.html', 'Explanation');">Explanation</a>
    </section>
</body>
{{!-- <script src="js/17040-workshop-explanation.js"></script> --}}
<script>
    //This is for the explanation section of the module

    ////////////////// TOP LEFT EXIT MODULE ////////////////////
    //Warning to prevent user from accidentally leaving the module
    function exitModule() {
        Swal.fire({
            title: 'Leave Module?',
            text: 'You will be taken back to the Modules Homepage.',
            icon: 'warning',
            showCancelButton: true,
            cancelButtonText: 'Cancel',
            confirmButtonText: 'Leave',
            reverseButtons: true
        }).then((result) => {
            if (result.value) {
                window.location.href = "index.html";
            }
        })
    }

    //////////////////////////////////////// NAVIGATION TAB  //////////////////////////////////////
    //checking for the path name
    var path = window.location.pathname;
    var page = path.split("/").pop();

    //highlighting the text to show the current page displayed
    if (page.includes('oe')) {
        document.querySelectorAll('#navigation-tab a')[0].style.color = "black";
        document.querySelectorAll('#navigation-tab a')[0].style.fontWeight = "500";
        document.querySelectorAll('#navigation-tab a')[0].style.cursor = "default";
    } else if (page.includes('interaction')) {
        document.querySelectorAll('#navigation-tab a')[1].style.color = "black";
        document.querySelectorAll('#navigation-tab a')[1].style.fontWeight = "500";
        document.querySelectorAll('#navigation-tab a')[1].style.cursor = "default";
    } else if (page.includes('explanation')) {
        document.querySelectorAll('#navigation-tab a')[2].style.color = "black";
        document.querySelectorAll('#navigation-tab a')[2].style.fontWeight = "500";
        document.querySelectorAll('#navigation-tab a')[2].style.cursor = "default";
    }

    //If the user clicks on a different section to jump to, warn them before they jump to it
    function jumpSection(destination, sectionName) {
        if (destination == page) {
        } else {
            Swal.fire({
                title: 'Start the ' + sectionName + ' section?',
                text: 'You will leave this module.',
                icon: 'warning',
                showCancelButton: true,
                cancelButtonText: 'Cancel',
                confirmButtonText: 'Start',
                reverseButtons: true
            }).then((result) => {
                if (result.value) {
                    window.location.href = destination;
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                }
            })
        }
    }

    ///////////////////////////////// AT THE END OF A MODULE ///////////////////////////
    //at the end of the module, automatically forward user to the next section - in this case the module home
    function nextModule() {
        window.location.href = "index.html";
    }

    ////////// USING LOCAL STORAGE TO OFFSET IF USER NAVIGATES TO PREVIOUS SLIDE FIXING/////////////
    document.getElementById('previous').addEventListener('click', function pointViewCount() {
        localStorage.setItem('prevCurrentPoint', currentPoint);
    })

    /////////////////////////////////// PROGRESSION THROUGH SLIDES ///////////////////////////////
    let pointIncrement = 0;
    //function to show current slide
    function showSlide(currentSlide) {
        //if the current slide is the first one, hide the previous button and show the next button only
        if (currentSlide == 0) {
            document.getElementById('previous').style.visibility = "hidden"
            document.getElementById('next').style.visibility = "visible"
            //if the current slide is the second last one, show the next-module button, hide the next button and show the previous button
        } else if (currentSlide == (document.querySelectorAll('.module-slide').length - 1)) {
            document.getElementById('previous').style.visibility = "visible"
            document.getElementById('next-module').style.visibility = "visible"
            document.getElementById('next').style.visibility = "hidden"
            //show both the previous and next buttons and hide the next-module button at all other times
        } else {
            document.getElementById('previous').style.visibility = "visible"
            document.getElementById('next').style.visibility = "visible"
            document.getElementById('next-module').style.visibility = "hidden"
        }

        //show this slide a.k.a current slide
        var thisSlide = document.getElementsByClassName('module-slide')[currentSlide];
        thisSlide.style.display = "flex";
        var caseContent = document.querySelectorAll('.case-content');
        //if this slide contains a class called 'case-content' a.k.a a point in a slide
        for (var i = 0; i < caseContent.length; i++) {
            if ((thisSlide.contains(caseContent[i])) && (true)) {
                //change the next button to show the next point
                document.getElementById('next').setAttribute("onclick", "nextPoint(1);")
            }
        }
    }

    //Progression through slides
    var currentSlide = 0;
    function nextSlide(n) {
        //hide the previous slide
        var previousSlide = document.getElementsByClassName('module-slide')[currentSlide];
        previousSlide.style.display = "none";
        //add or minus 1 to current slide, depending on previous or next button click
        currentSlide += n;
        //display the slide
        showSlide(currentSlide);
    }
    showSlide(currentSlide);

    ////////////////////////////////// PROGRESSION THROUGH POINT CONTENT /////////////////////////////

    //This both a progression and display function for showing each point in the module
    var currentPoint = 0;
    function nextPoint(n) {
        //x is the number of elements with the class case-content within the current slide
        var x = document.getElementsByClassName('module-slide')[currentSlide].querySelectorAll('.case-content').length;
        //Add or minus 1 to the current point, depending on previous or next button click
        currentPoint += n;
        pointIncrement++;
        var thisPoint = document.getElementsByClassName('case-content')[currentPoint];

        //if the current point is less than the number existing in this slide
        if (currentPoint < x) {
            //show it
            thisPoint.style.visibility = "visible";
            //if the points on this slide have already been displayed, add on the number to the current point count so that the it skips to the next slide
        } else if (localStorage.hasOwnProperty('prevCurrentPoint') == true) {
            currentPoint == (parseInt(localStorage.getItem('prevCurrentPoint')));
            document.getElementById('next').setAttribute("onclick", "nextSlide(1);");
            document.getElementById('next').click();
            localStorage.clear();
            currentPoint--;
            //if the current point is the maximum number of points in this slide, clear the class name, move on
        } else if (currentPoint == x) {
            for (let i = 0; i < currentPoint; i++) {
                document.getElementsByClassName('module-slide')[currentSlide].querySelectorAll('.case-content')[0].classList = "";
            }
            document.getElementById('next').click();
            document.getElementById('next').setAttribute("onclick", "nextSlide(1);");
            document.getElementById('next').click();
        } else {
            document.getElementById('next').setAttribute("onclick", "nextSlide(1);");
            document.getElementById('next').click();
            currentPoint = 0;
        }
    }

</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>